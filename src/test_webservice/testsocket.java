package test_webservice;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

public class testsocket {
	// 建服务器端
	public static void main(String[] args) throws IOException {
		testsocket socketService = new testsocket();
		// 1、a)创建一个服务器端Socket，即SocketService
		socketService.oneServer();
	}

	public void oneServer() {
		try {
			ServerSocket server = null;
			try {
				server = new ServerSocket(5209);
				// b)指定绑定的端口，并监听此端口。
				System.out.println("服务器启动成功");
				// 创建一个ServerSocket在端口5209监听客户请求
			} catch (Exception e) {
				System.out.println("没有启动监听：" + e);
				// 出错，打印出错信息
			}

			while (true) {
				Socket socket = null;
				try {
					socket = server.accept(); // 主线程获取客户端连接
					Thread workThread = new Thread(new Handler(socket)); // 创建线程
					workThread.start(); // 启动线程
				} catch (Exception e) {
					e.printStackTrace();
				}

				// try{
				// socket=server.accept();
				// //2、调用accept()方法开始监听，等待客户端的连接
				// //使用accept()阻塞等待客户请求，有客户
				// //请求到来则产生一个Socket对象，并继续执行
				// }catch(Exception e) {
				// System.out.println("Error."+e);
				// //出错，打印出错信息
				// }
				// BufferedReader in=new BufferedReader(new
				// InputStreamReader(socket.getInputStream()));
				// //由Socket对象得到输入流，并构造相应的BufferedReader对象
				// // InputStreamReader in=new
				// InputStreamReader(socket.getInputStream());
				//
				// PrintWriter writer=new PrintWriter(socket.getOutputStream());
				// //由Socket对象得到输出流，并构造PrintWriter对象
				//// int c = 0;
				//// StringBuffer temp = new StringBuffer();
				//// while((c = in.read())!= -1){
				////
				//// temp.append((char)c);
				//// System.out.println(c);
				//// System.out.println(temp.toString());
				////
				//// }
				////// System.out.println(temp.toString());
				//// String s=in.readLine();
				// int c = 0;
				// int a =0;
				// StringBuffer temp = new StringBuffer();
				// while(c!=35||a!=35){//35是字符#的意思 传入参数以##结尾
				// a=c;
				// c = in.read();
				// System.out.println(c);
				// temp.append((char)c);
				// }
				// writer.println("我是传出参数，你传入的是："+temp);
				//// //向客户端输出该字符串
				// writer.flush();
				// writer.close(); //关闭Socket输出流
				// in.close(); //关闭Socket输入流
				// socket.close(); //关闭Socket

			}

			// //3、获取输入流，并读取客户端信息
			// String line;
			// BufferedReader in=new BufferedReader(new
			// InputStreamReader(socket.getInputStream()));
			// //由Socket对象得到输入流，并构造相应的BufferedReader对象
			// PrintWriter writer=new PrintWriter(socket.getOutputStream());
			// //由Socket对象得到输出流，并构造PrintWriter对象
			// BufferedReader br=new BufferedReader(new
			// InputStreamReader(System.in));
			// //由系统标准输入设备构造BufferedReader对象
			// System.out.println("Client:"+in.readLine());
			// //在标准输出上打印从客户端读入的字符串
			// //line=br.readLine();//控制台输入返回信息
			// //System.out.println("Client111:"+line);
			// //从标准输入读入一字符串
			// //4、获取输出流，响应客户端的请求
			//// while(!line.equals("end")){
			//// //如果该字符串为 "bye"，则停止循环
			//// writer.println(line);
			//// //向客户端输出该字符串
			//// writer.flush();
			//// //刷新输出流，使Client马上收到该字符串
			//// System.out.println("Server:"+line);
			//// //在系统标准输出上打印读入的字符串
			//// System.out.println("Client144:"+in.readLine());
			//// //从Client读入一字符串，并打印到标准输出上
			//// line=br.readLine();
			//// //从系统标准输入读入一字符串
			//// } //继续循环
			//
			// while(true){
			// writer.println("我是返回信息："+in.readLine());
			// //向客户端输出该字符串
			// writer.flush();
			// //刷新输出流，使Client马上收到该字符串
			// }

			// server.close(); //关闭ServerSocket
		} catch (Exception e) {// 出错，打印出错信息
			System.out.println("Error." + e);
		}
	}

	class Handler implements Runnable {
		private Socket socket;

		public Handler(Socket socket) {
			this.socket = socket;
		}

		public void run() {
			try {
				System.out.println("新连接:" + socket.getInetAddress() + ":" + socket.getPort());
				// Thread.sleep(10000);
				BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
				// 由Socket对象得到输入流，并构造相应的BufferedReader对象
				// InputStreamReader in=new
				// InputStreamReader(socket.getInputStream());

				PrintWriter writer = new PrintWriter(socket.getOutputStream());
				// 由Socket对象得到输出流，并构造PrintWriter对象
				int c = 0;
				int a = 0;
				StringBuffer temp = new StringBuffer();
				while ((c != 35 || a != 35) && c != -1&& (c != 10 || a != 13)) {// 35是字符#的意思 传入参数以##结尾
															// -1是读取的字符为空时   13，10是回车
					a = c;
					c = in.read();
					System.out.println(c);
					temp.append((char) c);//拼接传入参数
				}
				/**
				 * 这里可以写具体的业务逻辑
				 */
				writer.println("我是传出参数，你传入的是：" + temp);
				// //向客户端输出该字符串
				writer.flush();// 刷新输出流，使Client马上收到该字符串
				writer.close(); // 关闭Socket输出流
				in.close(); // 关闭Socket输入流
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					System.out.println("关闭连接:" + socket.getInetAddress() + ":" + socket.getPort());
					if (socket != null)
						socket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

}
